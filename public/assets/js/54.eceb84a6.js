(window.webpackJsonp=window.webpackJsonp||[]).push([[54],{474:function(t,s,a){"use strict";a.r(s);var n=a(2),r=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"函数进阶"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#函数进阶"}},[t._v("#")]),t._v(" 函数进阶")]),t._v(" "),s("h2",{attrs:{id:"_1、函数提升"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1、函数提升"}},[t._v("#")]),t._v(" 1、函数提升")]),t._v(" "),s("blockquote",[s("p",[t._v("函数的定义，包括函数的具体方法，也是会被提升到当前作用域的最前面，所以（明面上）可以在声明前调用")])]),t._v(" "),s("h2",{attrs:{id:"_2、函数参数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2、函数参数"}},[t._v("#")]),t._v(" 2、函数参数")]),t._v(" "),s("h3",{attrs:{id:"_2-1-动态参数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-动态参数"}},[t._v("#")]),t._v(" 2.1 动态参数")]),t._v(" "),s("blockquote",[s("p",[t._v("允许传入任意个参数，函数内部会生成一个arguments伪数组，包含了所有的实参，只要函数声明时不写形参就行了")])]),t._v(" "),s("p",[s("strong",[t._v("JS可变参数的实现二：rest 参数（...）")])]),t._v(" "),s("p",[s("strong",[t._v("一定要写在最后一个参数上")])]),t._v(" "),s("p",[t._v("在ES6标准中引入了 rest 参数（形式为"),s("code",[t._v("…变量名")]),t._v("），用于获取函数的多余参数。rest 参数搭配的变量是一个数组，该变量将多余的参数放入数组中。非常适合处理变长参数的情况。")]),t._v(" "),s("p",[t._v("Rest就是为解决传入的参数数量不一定，它表示将多余的参数接受并放到一个数组里； Rest参数 本身就是数组，数组的相关的方法都可以用。")]),t._v(" "),s("p",[s("strong",[t._v("可变参数的实现语法：")])]),t._v(" "),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("theArgs")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token template-string"}},[s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token template-string"}},[s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...``}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("theArgs是一个真数组（可以使用push等方法）")]),t._v(" "),s("h2",{attrs:{id:"_3、展开运算符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3、展开运算符"}},[t._v("#")]),t._v(" 3、展开运算符")]),t._v(" "),s("p",[t._v("能把数组展开，不会修改原数组，也就是输出"),s("code",[t._v("1 3 4 5 7")])]),t._v(" "),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" arr "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("arr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("p",[s("strong",[t._v("用处1:")])]),t._v(" "),s("p",[t._v("数组没有封装求最大值,最小值的方法")]),t._v(" "),s("p",[t._v("可以使用展开运算符+"),s("code",[t._v("Math.max(a,x,y...)")])]),t._v(" "),s("p",[t._v("来获得最大值(参数里写展开运算符...arr)")]),t._v(" "),s("p",[t._v("本质是有逗号的,只是log出来没逗号")]),t._v(" "),s("p",[s("strong",[t._v("用处2:")])]),t._v(" "),s("p",[t._v("合并数组")]),t._v(" "),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" arr1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" arr2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("9")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("11")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" arr"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("arr1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("arr2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("h2",{attrs:{id:"_4、箭头函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4、箭头函数"}},[t._v("#")]),t._v(" 4、箭头函数")]),t._v(" "),s("blockquote",[s("p",[t._v("适合那些原本就需要匿名函数的地方")])]),t._v(" "),s("p",[t._v("基本语法直接略过")]),t._v(" "),s("p",[t._v("加"),s("strong",[t._v("圆括号")]),t._v("的函数体返回对象字面量表达式")]),t._v(" "),s("p",[s("code",[t._v("const fn = (uname)=>({uname : uname})")])]),t._v(" "),s("h3",{attrs:{id:"_4-1-参数详解"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-参数详解"}},[t._v("#")]),t._v(" 4.1 参数详解")]),t._v(" "),s("ul",[s("li",[t._v("没有arguments动态参数，可以使用rest剩余参数")])]),t._v(" "),s("h3",{attrs:{id:"_4-2-this"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-this"}},[t._v("#")]),t._v(" 4.2 this")]),t._v(" "),s("blockquote",[s("p",[t._v("普通函数的this是指向调用者的，在方法里直接写log(this)指向的是window")])]),t._v(" "),s("blockquote",[s("p",[t._v("箭头函数不会创建自己的this，只会从自己的作用域链的上一层沿用this")])]),t._v(" "),s("p",[s("strong",[t._v("也就是说上一个作用域写了this就直接沿用上一层的this指向，没写就直接指window，正常会指向dom节点的this也会直接指向window，所以dom事件的回调不推荐写箭头函数")])])])}),[],!1,null,null,null);s.default=r.exports}}]);